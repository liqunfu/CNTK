//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CNTK {

public class TrainingParameterPerSampleScheduleDouble : TrainingParameterScheduleDouble {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TrainingParameterPerSampleScheduleDouble(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CNTKLibPINVOKE.TrainingParameterPerSampleScheduleDouble_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TrainingParameterPerSampleScheduleDouble obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TrainingParameterPerSampleScheduleDouble() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CNTKLibPINVOKE.delete_TrainingParameterPerSampleScheduleDouble(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TrainingParameterPerSampleScheduleDouble(double value) : this(CNTKLibPINVOKE.new_TrainingParameterPerSampleScheduleDouble__SWIG_0(value), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TrainingParameterPerSampleScheduleDouble(DoubleVector schedule, uint epochSize) : this(CNTKLibPINVOKE.new_TrainingParameterPerSampleScheduleDouble__SWIG_1(DoubleVector.getCPtr(schedule), epochSize), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TrainingParameterPerSampleScheduleDouble(DoubleVector schedule) : this(CNTKLibPINVOKE.new_TrainingParameterPerSampleScheduleDouble__SWIG_2(DoubleVector.getCPtr(schedule)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TrainingParameterPerSampleScheduleDouble(VectorPairSizeTDouble schedule, uint epochSize) : this(CNTKLibPINVOKE.new_TrainingParameterPerSampleScheduleDouble__SWIG_3(VectorPairSizeTDouble.getCPtr(schedule), epochSize), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public TrainingParameterPerSampleScheduleDouble(VectorPairSizeTDouble schedule) : this(CNTKLibPINVOKE.new_TrainingParameterPerSampleScheduleDouble__SWIG_4(VectorPairSizeTDouble.getCPtr(schedule)), true) {
    if (CNTKLibPINVOKE.SWIGPendingException.Pending) throw CNTKLibPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
